// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: fpga.proto

#include "fpga.pb.h"
#include "fpga.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace protos {

static const char* Fpga_method_names[] = {
  "/protos.Fpga/VerifySig4vscc",
  "/protos.Fpga/SendBlock4mvcc",
};

std::unique_ptr< Fpga::Stub> Fpga::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Fpga::Stub> stub(new Fpga::Stub(channel));
  return stub;
}

Fpga::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_VerifySig4vscc_(Fpga_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendBlock4mvcc_(Fpga_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Fpga::Stub::VerifySig4vscc(::grpc::ClientContext* context, const ::protos::VsccEnvelope& request, ::protos::VsccResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_VerifySig4vscc_, context, request, response);
}

void Fpga::Stub::experimental_async::VerifySig4vscc(::grpc::ClientContext* context, const ::protos::VsccEnvelope* request, ::protos::VsccResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_VerifySig4vscc_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::protos::VsccResponse>* Fpga::Stub::AsyncVerifySig4vsccRaw(::grpc::ClientContext* context, const ::protos::VsccEnvelope& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::protos::VsccResponse>::Create(channel_.get(), cq, rpcmethod_VerifySig4vscc_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::protos::VsccResponse>* Fpga::Stub::PrepareAsyncVerifySig4vsccRaw(::grpc::ClientContext* context, const ::protos::VsccEnvelope& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::protos::VsccResponse>::Create(channel_.get(), cq, rpcmethod_VerifySig4vscc_, context, request, false);
}

::grpc::Status Fpga::Stub::SendBlock4mvcc(::grpc::ClientContext* context, const ::protos::Block4mvcc& request, ::protos::MvccResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SendBlock4mvcc_, context, request, response);
}

void Fpga::Stub::experimental_async::SendBlock4mvcc(::grpc::ClientContext* context, const ::protos::Block4mvcc* request, ::protos::MvccResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendBlock4mvcc_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::protos::MvccResponse>* Fpga::Stub::AsyncSendBlock4mvccRaw(::grpc::ClientContext* context, const ::protos::Block4mvcc& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::protos::MvccResponse>::Create(channel_.get(), cq, rpcmethod_SendBlock4mvcc_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::protos::MvccResponse>* Fpga::Stub::PrepareAsyncSendBlock4mvccRaw(::grpc::ClientContext* context, const ::protos::Block4mvcc& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::protos::MvccResponse>::Create(channel_.get(), cq, rpcmethod_SendBlock4mvcc_, context, request, false);
}

Fpga::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Fpga_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Fpga::Service, ::protos::VsccEnvelope, ::protos::VsccResponse>(
          std::mem_fn(&Fpga::Service::VerifySig4vscc), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Fpga_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Fpga::Service, ::protos::Block4mvcc, ::protos::MvccResponse>(
          std::mem_fn(&Fpga::Service::SendBlock4mvcc), this)));
}

Fpga::Service::~Service() {
}

::grpc::Status Fpga::Service::VerifySig4vscc(::grpc::ServerContext* context, const ::protos::VsccEnvelope* request, ::protos::VsccResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Fpga::Service::SendBlock4mvcc(::grpc::ServerContext* context, const ::protos::Block4mvcc* request, ::protos::MvccResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace protos

