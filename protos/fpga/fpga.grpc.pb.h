// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: fpga.proto
// Original file comments:
//
// cd /c/goworkspace/src/github.com/hyperledger/fabric/protos
// protoc -I ./ fpga/fpga.proto --go_out=plugins=grpc:fpga
//
//
// if cpp:
// protoc --protoc_path=./ --protoc_path=whatever_path_to_fabric/protos
//
#ifndef GRPC_fpga_2eproto__INCLUDED
#define GRPC_fpga_2eproto__INCLUDED

#include "fpga.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace protos {

// Interface exported by the server.
class Fpga final {
 public:
  static constexpr char const* service_full_name() {
    return "protos.Fpga";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status VerifySig4vscc(::grpc::ClientContext* context, const ::protos::VsccEnvelope& request, ::protos::VsccResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protos::VsccResponse>> AsyncVerifySig4vscc(::grpc::ClientContext* context, const ::protos::VsccEnvelope& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protos::VsccResponse>>(AsyncVerifySig4vsccRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protos::VsccResponse>> PrepareAsyncVerifySig4vscc(::grpc::ClientContext* context, const ::protos::VsccEnvelope& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protos::VsccResponse>>(PrepareAsyncVerifySig4vsccRaw(context, request, cq));
    }
    virtual ::grpc::Status SendBlock4mvcc(::grpc::ClientContext* context, const ::protos::Block4mvcc& request, ::protos::MvccResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protos::MvccResponse>> AsyncSendBlock4mvcc(::grpc::ClientContext* context, const ::protos::Block4mvcc& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protos::MvccResponse>>(AsyncSendBlock4mvccRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protos::MvccResponse>> PrepareAsyncSendBlock4mvcc(::grpc::ClientContext* context, const ::protos::Block4mvcc& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protos::MvccResponse>>(PrepareAsyncSendBlock4mvccRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void VerifySig4vscc(::grpc::ClientContext* context, const ::protos::VsccEnvelope* request, ::protos::VsccResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendBlock4mvcc(::grpc::ClientContext* context, const ::protos::Block4mvcc* request, ::protos::MvccResponse* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protos::VsccResponse>* AsyncVerifySig4vsccRaw(::grpc::ClientContext* context, const ::protos::VsccEnvelope& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protos::VsccResponse>* PrepareAsyncVerifySig4vsccRaw(::grpc::ClientContext* context, const ::protos::VsccEnvelope& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protos::MvccResponse>* AsyncSendBlock4mvccRaw(::grpc::ClientContext* context, const ::protos::Block4mvcc& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protos::MvccResponse>* PrepareAsyncSendBlock4mvccRaw(::grpc::ClientContext* context, const ::protos::Block4mvcc& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status VerifySig4vscc(::grpc::ClientContext* context, const ::protos::VsccEnvelope& request, ::protos::VsccResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protos::VsccResponse>> AsyncVerifySig4vscc(::grpc::ClientContext* context, const ::protos::VsccEnvelope& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protos::VsccResponse>>(AsyncVerifySig4vsccRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protos::VsccResponse>> PrepareAsyncVerifySig4vscc(::grpc::ClientContext* context, const ::protos::VsccEnvelope& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protos::VsccResponse>>(PrepareAsyncVerifySig4vsccRaw(context, request, cq));
    }
    ::grpc::Status SendBlock4mvcc(::grpc::ClientContext* context, const ::protos::Block4mvcc& request, ::protos::MvccResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protos::MvccResponse>> AsyncSendBlock4mvcc(::grpc::ClientContext* context, const ::protos::Block4mvcc& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protos::MvccResponse>>(AsyncSendBlock4mvccRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protos::MvccResponse>> PrepareAsyncSendBlock4mvcc(::grpc::ClientContext* context, const ::protos::Block4mvcc& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protos::MvccResponse>>(PrepareAsyncSendBlock4mvccRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void VerifySig4vscc(::grpc::ClientContext* context, const ::protos::VsccEnvelope* request, ::protos::VsccResponse* response, std::function<void(::grpc::Status)>) override;
      void SendBlock4mvcc(::grpc::ClientContext* context, const ::protos::Block4mvcc* request, ::protos::MvccResponse* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::protos::VsccResponse>* AsyncVerifySig4vsccRaw(::grpc::ClientContext* context, const ::protos::VsccEnvelope& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protos::VsccResponse>* PrepareAsyncVerifySig4vsccRaw(::grpc::ClientContext* context, const ::protos::VsccEnvelope& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protos::MvccResponse>* AsyncSendBlock4mvccRaw(::grpc::ClientContext* context, const ::protos::Block4mvcc& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protos::MvccResponse>* PrepareAsyncSendBlock4mvccRaw(::grpc::ClientContext* context, const ::protos::Block4mvcc& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_VerifySig4vscc_;
    const ::grpc::internal::RpcMethod rpcmethod_SendBlock4mvcc_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status VerifySig4vscc(::grpc::ServerContext* context, const ::protos::VsccEnvelope* request, ::protos::VsccResponse* response);
    virtual ::grpc::Status SendBlock4mvcc(::grpc::ServerContext* context, const ::protos::Block4mvcc* request, ::protos::MvccResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_VerifySig4vscc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_VerifySig4vscc() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_VerifySig4vscc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifySig4vscc(::grpc::ServerContext* context, const ::protos::VsccEnvelope* request, ::protos::VsccResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVerifySig4vscc(::grpc::ServerContext* context, ::protos::VsccEnvelope* request, ::grpc::ServerAsyncResponseWriter< ::protos::VsccResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendBlock4mvcc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SendBlock4mvcc() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SendBlock4mvcc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendBlock4mvcc(::grpc::ServerContext* context, const ::protos::Block4mvcc* request, ::protos::MvccResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendBlock4mvcc(::grpc::ServerContext* context, ::protos::Block4mvcc* request, ::grpc::ServerAsyncResponseWriter< ::protos::MvccResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_VerifySig4vscc<WithAsyncMethod_SendBlock4mvcc<Service > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_VerifySig4vscc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_VerifySig4vscc() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_VerifySig4vscc<BaseClass>, ::protos::VsccEnvelope, ::protos::VsccResponse>(
          [this](::grpc::ServerContext* context,
                 const ::protos::VsccEnvelope* request,
                 ::protos::VsccResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->VerifySig4vscc(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_VerifySig4vscc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifySig4vscc(::grpc::ServerContext* context, const ::protos::VsccEnvelope* request, ::protos::VsccResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void VerifySig4vscc(::grpc::ServerContext* context, const ::protos::VsccEnvelope* request, ::protos::VsccResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SendBlock4mvcc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SendBlock4mvcc() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_SendBlock4mvcc<BaseClass>, ::protos::Block4mvcc, ::protos::MvccResponse>(
          [this](::grpc::ServerContext* context,
                 const ::protos::Block4mvcc* request,
                 ::protos::MvccResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SendBlock4mvcc(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_SendBlock4mvcc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendBlock4mvcc(::grpc::ServerContext* context, const ::protos::Block4mvcc* request, ::protos::MvccResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SendBlock4mvcc(::grpc::ServerContext* context, const ::protos::Block4mvcc* request, ::protos::MvccResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_VerifySig4vscc<ExperimentalWithCallbackMethod_SendBlock4mvcc<Service > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_VerifySig4vscc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_VerifySig4vscc() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_VerifySig4vscc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifySig4vscc(::grpc::ServerContext* context, const ::protos::VsccEnvelope* request, ::protos::VsccResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendBlock4mvcc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SendBlock4mvcc() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SendBlock4mvcc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendBlock4mvcc(::grpc::ServerContext* context, const ::protos::Block4mvcc* request, ::protos::MvccResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_VerifySig4vscc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_VerifySig4vscc() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_VerifySig4vscc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifySig4vscc(::grpc::ServerContext* context, const ::protos::VsccEnvelope* request, ::protos::VsccResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVerifySig4vscc(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendBlock4mvcc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SendBlock4mvcc() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SendBlock4mvcc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendBlock4mvcc(::grpc::ServerContext* context, const ::protos::Block4mvcc* request, ::protos::MvccResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendBlock4mvcc(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_VerifySig4vscc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_VerifySig4vscc() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_VerifySig4vscc<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->VerifySig4vscc(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_VerifySig4vscc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifySig4vscc(::grpc::ServerContext* context, const ::protos::VsccEnvelope* request, ::protos::VsccResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void VerifySig4vscc(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SendBlock4mvcc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SendBlock4mvcc() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_SendBlock4mvcc<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SendBlock4mvcc(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_SendBlock4mvcc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendBlock4mvcc(::grpc::ServerContext* context, const ::protos::Block4mvcc* request, ::protos::MvccResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SendBlock4mvcc(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_VerifySig4vscc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_VerifySig4vscc() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::protos::VsccEnvelope, ::protos::VsccResponse>(std::bind(&WithStreamedUnaryMethod_VerifySig4vscc<BaseClass>::StreamedVerifySig4vscc, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_VerifySig4vscc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status VerifySig4vscc(::grpc::ServerContext* context, const ::protos::VsccEnvelope* request, ::protos::VsccResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVerifySig4vscc(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protos::VsccEnvelope,::protos::VsccResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendBlock4mvcc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SendBlock4mvcc() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::protos::Block4mvcc, ::protos::MvccResponse>(std::bind(&WithStreamedUnaryMethod_SendBlock4mvcc<BaseClass>::StreamedSendBlock4mvcc, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SendBlock4mvcc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendBlock4mvcc(::grpc::ServerContext* context, const ::protos::Block4mvcc* request, ::protos::MvccResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendBlock4mvcc(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protos::Block4mvcc,::protos::MvccResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_VerifySig4vscc<WithStreamedUnaryMethod_SendBlock4mvcc<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_VerifySig4vscc<WithStreamedUnaryMethod_SendBlock4mvcc<Service > > StreamedService;
};

}  // namespace protos


#endif  // GRPC_fpga_2eproto__INCLUDED
